package $organization$

import cats.effect._
$if(use_protobuf.truthy)$
import $organization$.hello._
$endif$
import higherkindness.mu.rpc.server._
import higherkindness.mu.rpc.testing.servers.withServerChannel
import io.grpc.ManagedChannel
import org.scalatest.flatspec.AnyFlatSpec
import scala.concurrent.ExecutionContext.Implicits

class ServerSpec extends AnyFlatSpec {

  import cats.effect.unsafe.implicits.global

  implicit val greeter: Greeter[IO] = new HappyGreeter[IO]

  /*
   * A cats-effect Resource that builds a gRPC server and client
   * connected to each other via an in-memory channel.
   */
  val clientResource: Resource[IO, Greeter[IO]] = for {
    sc        <- withServerChannel(Greeter.bindService[IO])
    clientRes <- Greeter.clientFromChannel[IO](IO.pure(sc.channel))
  } yield clientRes

  behavior of "RPC server"

  it should "be happy" in {
    val response: HelloResponse = clientResource
      .use(client => client.SayHello(HelloRequest("somebody")))
      .unsafeRunSync()

    assert(response.happy === true)
  }

}
